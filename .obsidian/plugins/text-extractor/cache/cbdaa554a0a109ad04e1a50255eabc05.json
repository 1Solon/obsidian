{"path":".obsidian/plugins/text-extractor/cache/cbdaa554a0a109ad04e1a50255eabc05.json","text":"L . - I s > + Most of Node js is built around an asynchronous, event-driven SrepLevs B var events = require('events'); architecture var eventEmitter = new events.EventEmitter(); » Core APIs, such as the fs module or the net, module use events to Create an event handler: . i . var myEventHandler = function () { communicate with the program. Once the fs module is ready to 'm:io‘{:\"lo;r\" ”er‘ '“' : “‘.. . provide data to be read, it emits an event. } + To handle events, Node.js uses the events module. It has a class Assign the event handler to an event i . . R eventEmitter.on('launch', myEventHandler); named EventEmitter and all objects that emit events belong to this cEes 12 ire the 'scream' event: ) eventEmitter.emit('launch'); « eventEmitter.on() allows for one or more functions to be aftached to a specific event. These attached functions are also called listeners, PROBLEMS ~ OUTPUT DEBUG CONSOLE TERMINAL as they listen for events to be emitted ) . johnathan@soc-MBP1320-JMC Lab 3 % node events.js Debugger attached. We have lift off!!! Waiting for the debugger to disconnect... johnathan@soc-MBP1320-JMC Lab 3 % I","libVersion":"0.2.2","langs":"eng"}